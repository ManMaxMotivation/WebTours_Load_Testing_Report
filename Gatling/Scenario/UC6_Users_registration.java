package io.gatling.demo;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import java.time.Duration;
import java.util.*;
import org.json.JSONObject;
import io.gatling.javaapi.core.*;
import io.gatling.javaapi.http.*;
import static io.gatling.javaapi.core.CoreDsl.*;
import static io.gatling.javaapi.http.HttpDsl.*;

// –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –≤–µ–±-—Å–∞–π—Ç–µ —Å –ø–æ–º–æ—â—å—é Gatling
public class UC6_Users_registration extends Simulation {

    // üì¶ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è HTTP-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    // –û–ø–∏—Å–∞–Ω–∏–µ: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤, —Ç–∞–∫–∏–µ –∫–∞–∫ –±–∞–∑–æ–≤—ã–π URL, –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞.
    // - baseUrl: –£–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥—Ä–µ—Å —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (http://localhost:1080).
    // - inferHtmlResources: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è).
    // - –ó–∞–≥–æ–ª–æ–≤–∫–∏: –ò–º–∏—Ç–∏—Ä—É—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ Firefox 137.0, –≤–∫–ª—é—á–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–∂–∞—Ç–∏—è (gzip, deflate, br),
    //   —è–∑—ã–∫–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (ru-RU) –∏ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.
    public static HttpProtocolBuilder httpProtocol = http
            .baseUrl("http://localhost:1080")
            .inferHtmlResources()
            .acceptHeader("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            .acceptEncodingHeader("gzip, deflate, br")
            .acceptLanguageHeader("ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3")
            .upgradeInsecureRequestsHeader("1")
            .userAgentHeader("Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0");

    // üßæ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    // –û–ø–∏—Å–∞–Ω–∏–µ: –û–ø—Ä–µ–¥–µ–ª—è—é—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞.
    // - headers_0: –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –º–µ–Ω—é (document, navigate, same-origin).
    // - headers_1, headers_2: –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º (frame, navigate, same-origin).
    // - headers_3: –î–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (multipart/form-data —Å boundary).
    public static Map<CharSequence, String> headers_0 = Map.ofEntries(
            Map.entry("Priority", "u=0, i"),
            Map.entry("Sec-Fetch-Dest", "document"),
            Map.entry("Sec-Fetch-Mode", "navigate"),
            Map.entry("Sec-Fetch-Site", "same-origin"),
            Map.entry("Sec-Fetch-User", "?1")
    );

    public static Map<CharSequence, String> headers_1 = Map.ofEntries(
            Map.entry("Priority", "u=4"),
            Map.entry("Sec-Fetch-Dest", "frame"),
            Map.entry("Sec-Fetch-Mode", "navigate"),
            Map.entry("Sec-Fetch-Site", "same-origin")
    );

    public static Map<CharSequence, String> headers_2 = Map.ofEntries(
            Map.entry("Priority", "u=4"),
            Map.entry("Sec-Fetch-Dest", "frame"),
            Map.entry("Sec-Fetch-Mode", "navigate"),
            Map.entry("Sec-Fetch-Site", "same-origin"),
            Map.entry("Sec-Fetch-User", "?1")
    );

    public static Map<CharSequence, String> headers_3 = Map.ofEntries(
            Map.entry("Content-Type", "multipart/form-data; boundary=----geckoformboundarycf3bb6f64d230fe94c673ac7726e8c35"),
            Map.entry("Origin", "http://localhost:1080"),
            Map.entry("Priority", "u=4"),
            Map.entry("Sec-Fetch-Dest", "document"),
            Map.entry("Sec-Fetch-Mode", "navigate"),
            Map.entry("Sec-Fetch-Site", "same-origin"),
            Map.entry("Sec-Fetch-User", "?1")
    );

    // üóÇÔ∏è –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –º–µ—Ç–æ–¥—ã
    // –û–ø–∏—Å–∞–Ω–∏–µ: –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    // - usedCombinations: –•—Ä–∞–Ω–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∏–º–µ–Ω –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
    // - random: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö.
    // - streets, cities: –°–ø–∏—Å–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    public static final Set<String> usedCombinations = Collections.synchronizedSet(new HashSet<>());
    public static final Random random = new Random();

    public static final List<String> streets = List.of(
            "Evergreen Terrace", "Main St", "Oakwood Drive", "Maple Ave", "Sunset Blvd",
            "Riverside Lane", "Pine Street", "Cedar Avenue", "Hilltop Road", "Birch Court",
            "Willow Lane", "Chestnut St", "Elmwood Dr", "SprUCe Way", "Highland Rd",
            "Valley View", "Lake Shore Dr", "Meadow Lane", "Forest Ave", "Parkside Dr",
            "Canyon Rd", "Orchard St", "Brookside Ave", "Ridgeway Dr", "Sunnyhill Ln"
    );

    public static final List<String> cities = List.of(
            "New York, NY 10001", "Los Angeles, CA 90001", "San Francisco, CA 94110",
            "Chicago, IL 60614", "Houston, TX 77002", "Miami, FL 33101", "Seattle, WA 98101",
            "Austin, TX 73301", "Denver, CO 80201", "Boston, MA 02108", "Phoenix, AZ 85001",
            "Portland, OR 97201", "Atlanta, GA 30301", "Dallas, TX 75201", "San Diego, CA 92101",
            "Las Vegas, NV 89101", "Minneapolis, MN 55401", "Philadelphia, PA 19101",
            "Charlotte, NC 28201", "Orlando, FL 32801", "Salt Lake City, UT 84101",
            "Kansas City, MO 64101", "Nashville, TN 37201", "Columbus, OH 43201", "Raleigh, NC 27601"
    );

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: —É–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä, –∏ –¥–µ–ª–∞–µ—Ç –±—É–∫–≤—ã –º–∞–ª–µ–Ω—å–∫–∏–º–∏
    public static String cleanString(String input) {
        return input.replaceAll("[^a-zA-Z0-9]", "").toLowerCase().trim();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã
    public static String transliterateAndClean(String input) {
        Map<Character, Character> map = Map.ofEntries(
                Map.entry('ƒ±', 'i'), Map.entry('ƒ∞', 'I'), Map.entry('≈ü', 's'), Map.entry('≈û', 'S'),
                Map.entry('√ß', 'c'), Map.entry('√á', 'C'), Map.entry('ƒü', 'g'), Map.entry('ƒû', 'G'),
                Map.entry('√∂', 'o'), Map.entry('√ñ', 'O'), Map.entry('√º', 'u'), Map.entry('√ú', 'U'),
                Map.entry('√°', 'a'), Map.entry('√Å', 'A'), Map.entry('√©', 'e'), Map.entry('√â', 'E'),
                Map.entry('√≠', 'i'), Map.entry('√ç', 'I'), Map.entry('√≥', 'o'), Map.entry('√ì', 'O'),
                Map.entry('√∫', 'u'), Map.entry('√ö', 'U'), Map.entry('√±', 'n'), Map.entry('√ë', 'N')
        );
        StringBuilder sb = new StringBuilder();
        for (char c : input.toCharArray()) {
            sb.append(map.getOrDefault(c, c));
        }
        return sb.toString().replaceAll("[^a-zA-Z0-9]", "").trim();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –û–ø–∏—Å–∞–Ω–∏–µ: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å randomuser.me, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ NewUsers.csv.
// - –ï—Å–ª–∏ API –æ—Ç–≤–µ—á–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ API –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É –∫ username.
// - –ï—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π username, firstName, lastName –∏–∑ –±—É–∫–≤ (a-z), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
// - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ usedCombinations.
// - –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–æ–ª—å –∏–∑ 12 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
// - –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∞–¥—Ä–µ—Å –∏ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ streets –∏ cities.
    public static Map<String, String> getRandomUser() throws IOException {
        File file = new File("src/test/resources/NewUsers.csv");
        boolean fileExists = file.exists();
        File parentDir = file.getParentFile();
        if (parentDir != null && !parentDir.exists()) {
            parentDir.mkdirs();
        }

        try (FileWriter fw = new FileWriter(file, true)) {
            if (!fileExists) {
                fw.write("username,password,firstName,lastName,address1,address2\n");
            }

            // –°–æ–∫—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ 10, —Ç–∞–∫ –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è
            for (int i = 0; i < 10; i++) {
                String first;
                String last;
                String username;

                try {
                    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç API
                    URL url = new URL("https://randomuser.me/api/");
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.setRequestMethod("GET");
                    conn.setRequestProperty("User-Agent", "Mozilla/5.0");
                    conn.setConnectTimeout(3000); // –¢–∞–π–º–∞—É—Ç 5 —Å–µ–∫—É–Ω–¥
                    conn.setReadTimeout(3000); // –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è 5 —Å–µ–∫—É–Ω–¥
                    String json = new String(conn.getInputStream().readAllBytes());
                    JSONObject resp = new JSONObject(json);
                    JSONObject user = resp.getJSONArray("results").getJSONObject(0);
                    JSONObject name = user.getJSONObject("name");
                    first = name.getString("first");
                    last = name.getString("last");
                    String combo = (first + last).toLowerCase();
                    combo = combo.substring(0, Math.min(10, combo.length()));
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É (a-z)
                    char randomLetter = (char) ('a' + random.nextInt(26));
                    username = cleanString(combo) + randomLetter; // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É –∫ username
                } catch (IOException e) {
                    // –ï—Å–ª–∏ API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—É–∫–≤ (a-z)
                    String chars = "abcdefghijklmnopqrstuvwxyz";
                    int nameLength = 5 + random.nextInt(4); // –î–ª–∏–Ω–∞ 5-8
                    StringBuilder randomFirst = new StringBuilder();
                    StringBuilder randomLast = new StringBuilder();
                    for (int j = 0; j < nameLength; j++) {
                        randomFirst.append(chars.charAt(random.nextInt(chars.length())));
                        randomLast.append(chars.charAt(random.nextInt(chars.length())));
                    }
                    first = randomFirst.toString();
                    last = randomLast.toString();
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π username –∏–∑ –±—É–∫–≤ (a-z, 8-10 —Å–∏–º–≤–æ–ª–æ–≤) + —Å–ª—É—á–∞–π–Ω–∞—è –±—É–∫–≤–∞
                    int usernameLength = 8 + random.nextInt(3); // –î–ª–∏–Ω–∞ 8-10
                    StringBuilder randomUsername = new StringBuilder();
                    for (int j = 0; j < usernameLength; j++) {
                        randomUsername.append(chars.charAt(random.nextInt(chars.length())));
                    }
                    char randomLetter = (char) ('a' + random.nextInt(26));
                    username = randomUsername.toString() + randomLetter;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ usedCombinations
                if (usedCombinations.add(username)) {
                    String cleanFirst = transliterateAndClean(first);
                    String cleanLast = transliterateAndClean(last);
                    if (!username.isEmpty() && !cleanFirst.isEmpty() && !cleanLast.isEmpty()) {
                        String password = random.ints(12, 0, 62)
                                .mapToObj(n -> "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(n, n + 1))
                                .reduce("", String::concat);
                        String addr1 = streets.get(random.nextInt(streets.size()));
                        String addr2 = cities.get(random.nextInt(cities.size()));

                        fw.write(String.join(",", username, password, cleanFirst, cleanLast,
                                addr1.replace(",", ""), addr2.replace(",", "")) + "\n");
                        // –£–±–∏—Ä–∞–µ–º fw.flush() –¥–ª—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏

                        return Map.of(
                                "username", username,
                                "password", password,
                                "firstName", cleanFirst,
                                "lastName", cleanLast,
                                "address1", addr1,
                                "address2", addr2
                        );
                    }
                }
            }
        }
        throw new RuntimeException("Cannot generate unique user");
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞ (a, b, c, ..., aa, ab, ...)
    public static String generateLetterSuffix(int index) {
        StringBuilder suffix = new StringBuilder();
        while (index >= 0) {
            suffix.insert(0, (char) ('a' + (index % 26)));
            index = (index / 26) - 1;
            if (index < 0) break;
        }
        return suffix.toString();
    }

    // üè† –®–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –û–ø–∏—Å–∞–Ω–∏–µ: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ randomuser.me, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏.
// - –í—ã–∑—ã–≤–∞–µ—Ç getRandomUser –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
// - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ username –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
// - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç username, password, firstName, lastName, address1, address2 –≤ —Å–µ—Å—Å–∏–∏.
// - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∏–Ω–∞—á–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    public static ChainBuilder generateUser = group("Generate_User").on(
            exec(session -> {
                try {
                    Map<String, String> user = getRandomUser();
                    session = session
                            .set("username", user.get("username"))
                            .set("password", user.get("password"))
                            .set("firstName", user.get("firstName"))
                            .set("lastName", user.get("lastName"))
                            .set("address1", user.get("address1"))
                            .set("address2", user.get("address2"));
                    if (session.getString("username") == null || session.getString("password") == null ||
                            session.getString("firstName") == null || session.getString("lastName") == null ||
                            session.getString("address1") == null || session.getString("address2") == null) {
                        throw new RuntimeException("User data not set in session");
                    }
                    return session;
                } catch (IOException e) {
                    throw new RuntimeException("Failed to generate user: " + e.getMessage(), e);
                }
            })
    );

    // üè† –®–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    // –û–ø–∏—Å–∞–Ω–∏–µ: –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏.
    // - home_page_0: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º signOff=1 –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏.
    // - home_page_1: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç userSession.
    public static ChainBuilder homePage = group("Home_Page").on(
            exec(
                    http("home_page_0")
                            .get("/cgi-bin/welcome.pl?signOff=1")
                            .headers(headers_0)
                            .check(
                                    substring("A Session ID has been created").exists(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                                    substring("Web Tours").exists(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ "Web Tours"
                                    bodyString().saveAs("tempResponse_0") // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                            )
                    // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫:
                    // - substring("A Session ID has been created").exists(): –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.
                    // - substring("Web Tours").exists(): –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
                    // - bodyString().saveAs("tempResponse_0"): –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-–æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
            ),
            exec(
                    http("home_page_1")
                            .get("/cgi-bin/nav.pl?in=home")
                            .headers(headers_1)
                            .check(
                                    regex("name=\"userSession\" value=\"(.+?)\"").saveAs("userSession"), // –ò–∑–≤–ª–µ–∫–∞–µ—Ç userSession
                                    substring("Web Tours Navigation Bar").exists(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
                                    bodyString().saveAs("tempResponse_1") // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                            )
                    // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫:
                    // - regex(...).saveAs("userSession"): –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ userSession –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
                    // - substring("Web Tours Navigation Bar").exists(): –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏.
                    // - bodyString().saveAs("tempResponse_1"): –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-–æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
            )
    );

    // üìù –®–∞–≥ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    // –û–ø–∏—Å–∞–Ω–∏–µ: –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    // - Sign_Up_Now_0: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    public static ChainBuilder signUpNow = group("Sign_Up_Now").on(
            exec(
                    http("sign_up_now_0")
                            .get("/cgi-bin/login.pl?username=&password=&getInfo=true")
                            .headers(headers_2)
                            .check(
                                    substring("choose a username and password combination").exists(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                                    substring("Customer Profile").exists(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã
                                    bodyString().saveAs("tempResponse_2") // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                            )
                    // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫:
                    // - substring("choose a username and password combination").exists(): –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ —Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å.
                    // - substring("Customer Profile").exists(): –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ñ–æ—Ä–º—ã.
                    // - bodyString().saveAs("tempResponse_2"): –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-–æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
            )
    );

    // üìã –®–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ä–º—ã.
    // - –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    public static ChainBuilder logUserData = group("Log_User_Data").on(
            exec(session -> {
                if (session.getString("username") == null || session.getString("password") == null ||
                        session.getString("firstName") == null || session.getString("lastName") == null ||
                        session.getString("address1") == null || session.getString("address2") == null) {
                    throw new RuntimeException("User data missing in session for logging");
                }
                return session;
            })
    );

    // üì¨ –®–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
// –û–ø–∏—Å–∞–Ω–∏–µ: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
// - Submit_Form_0: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É —Å username, password, firstName, lastName, address1, address2.
// - –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    public static ChainBuilder submitForm = group("Submit_Form").on(
            exec(
                    http("submit_form_0")
                            .post("/cgi-bin/login.pl")
                            .headers(headers_3)
                            .formParam("username", "#{username}")
                            .formParam("password", "#{password}")
                            .formParam("passwordConfirm", "#{password}")
                            .formParam("firstName", "#{firstName}")
                            .formParam("lastName", "#{lastName}")
                            .formParam("address1", "#{address1}")
                            .formParam("address2", "#{address2}")
                            .formParam("register.x", "46")
                            .formParam("register.y", "11")
                            .check(
                                    substring("Registration successful").optional(),
                                    substring("Welcome to Web Tours").exists(),
                                    substring("Thank you, <b>#{username}</b>, for registering").exists(),
                                    bodyString().saveAs("tempResponse_3")
                            )
            )
    );

    // üìä –®–∞–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
    // –û–ø–∏—Å–∞–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.
    // - –í—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    public static ChainBuilder logResponse = group("Log_Response").on(
            exec(session -> {
                if (session.getString("tempResponse_3") == null) {
                    throw new RuntimeException("Response body missing in session");
                }
                return session;
            })
    );

    // ‚úÖ –®–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    // –û–ø–∏—Å–∞–Ω–∏–µ: –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é.
    // - Registration_Confirmation_0: –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ–Ω—é.
    // - Registration_Confirmation_1: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å.
    // - Registration_Confirmation_2: –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
    public static ChainBuilder registrationConfirmation = group("Registration_Confirmation").on(
            exec(
                    http("registration_confirmation_0")
                            .get("/cgi-bin/welcome.pl?page=menus")
                            .headers(headers_0)
                            .check(
                                    substring("Since user has already logged on").exists(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª
                                    substring("Web Tours").exists(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ "Web Tours"
                                    bodyString().saveAs("tempResponse_4") // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                            )
                    // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫:
                    // - substring("Since user has already logged on").exists(): –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.
                    // - substring("Web Tours").exists(): –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–µ–Ω—é –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å.
                    // - bodyString().saveAs("tempResponse_4"): –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-–æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
            ),
            exec(
                    http("registration_confirmation_1")
                            .get("/cgi-bin/nav.pl?page=menu&in=home")
                            .headers(headers_1)
                            .check(
                                    substring("menu").optional(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –º–µ–Ω—é
                                    substring("Web Tours Navigation Bar").exists(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
                                    bodyString().saveAs("tempResponse_5") // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                            )
                    // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫:
                    // - substring("menu").optional(): –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
                    // - substring("Web Tours Navigation Bar").exists(): –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏.
                    // - bodyString().saveAs("tempResponse_5"): –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-–æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
            ),
            exec(
                    http("registration_confirmation_2")
                            .get("/cgi-bin/login.pl?welcome=true")
                            .headers(headers_1)
                            .check(
                                    substring("Welcome").optional(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                                    substring("Illegal Access").exists(), // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –¥–æ—Å—Ç—É–ø–∞
                                    bodyString().saveAs("tempResponse_6") // –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                            )
                    // –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫:
                    // - substring("Welcome").optional(): –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
                    // - substring("Illegal Access").exists(): –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
                    // - bodyString().saveAs("tempResponse_6"): –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML-–æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
            )
    );

    // üîì –®–∞–≥ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    // –û–ø–∏—Å–∞–Ω–∏–µ: –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    // - Logout_0: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∞—É—Ç.
    public static ChainBuilder logout = group("Logout").on(
            exec(
                    http("logout_0")
                            .get("/cgi-bin/welcome.pl?signOff=1") // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥
                            .headers(headers_0)
                            .check(
                                    substring("Session ID has been created").exists(), // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                                    bodyString().saveAs("tempResponse_logout1") // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                            )
            ),
            exec(
                    http("logout_1")
                            .get("/cgi-bin/nav.pl?in=home") // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
                            .headers(headers_1)
                            .check(
                                    substring("Web Tours Navigation Bar").exists(), // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞
                                    regex("<input type=\"hidden\" name=\"userSession\" value=\"(.+?)\"").exists(), // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞
                                    bodyString().saveAs("tempResponse_logout2") // üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                            )
            )
    );

    // üìú –®–∞–≥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    // –û–ø–∏—Å–∞–Ω–∏–µ: –í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –¥–∞–Ω–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å).
    // - –ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏ password –∏–∑ —Å–µ—Å—Å–∏–∏.
    // - –õ–æ–≥–∏—Ä—É–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏.
    public static ChainBuilder logRegisteredUsers = group("Log_Registered_Users").on(
            exec(session -> {
                String username = session.getString("username");
                String password = session.getString("password");

                System.out.println("Registered User Credentials: username=" + username + ", password=" + password);

                if (username == null || password == null) {
                    System.err.println("Warning: User credentials missing in session for logging");
                }

                return session;
            })
    );

    // üß™ –°—Ü–µ–Ω–∞—Ä–∏–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —à–∞–≥–∏
    // –û–ø–∏—Å–∞–Ω–∏–µ: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    // 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    // 3. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.
    // 7. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
    // 8. –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
    // 9. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    // –ü–∞—É–∑—ã (3 —Å–µ–∫—É–Ω–¥—ã) –º–µ–∂–¥—É –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —à–∞–≥–∞–º–∏ –∏–º–∏—Ç–∏—Ä—É—é—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    public static ScenarioBuilder scn = scenario("UC6_Users_registration")
            .exec(generateUser)
            .pause(3)
            .exec(homePage)
            .pause(3)
            .exec(signUpNow)
            .pause(3)
            .exec(logUserData)
            .pause(3)
            .exec(submitForm)
            .pause(3)
            .exec(logResponse)
            .pause(3)
            .exec(registrationConfirmation)
            .pause(3)
            .exec(logout)
            .pause(3)
            .exec(logRegisteredUsers);

    // üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ (–∑–∞–∫—Ä—ã—Ç–∞—è –º–æ–¥–µ–ª—å)
    private static final int USER_COUNT = 10;
    private static final Duration TEST_DURATION = Duration.ofSeconds(2);

    {
        setUp(
                scn.injectClosed(
                        constantConcurrentUsers(USER_COUNT).during(TEST_DURATION)
                )
        ).protocols(httpProtocol);
    }
}
// –û–ø–∏—Å–∞–Ω–∏–µ: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞.
// - constantUsersPerSec(3): –ó–∞–ø—É—Å–∫–∞–µ—Ç 3 –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É.
// - during(34): –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ ‚Äî 34 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ —Å–æ–∑–¥–∞—ë—Ç ~102 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (3 √ó 34).
// - –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç ~100 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö —á–µ—Ä–µ–∑ randomuser.me.
// - injectOpen: –ú–æ–¥–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö.
// - protocols(httpProtocol): –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HTTP –∫–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º.